/*
 * Corona-Warn-App / cwa-verification
 *
 * (C) 2020, T-Systems International GmbH
 *
 * Deutsche Telekom AG and all other contributors /
 * copyright owners license this file to you under the Apache
 * License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package app.coronawarn.verification.controller;

import static java.util.concurrent.TimeUnit.MILLISECONDS;

import app.coronawarn.verification.model.LabTestResult;
import app.coronawarn.verification.model.RegistrationToken;
import app.coronawarn.verification.model.RegistrationTokenRequest;
import app.coronawarn.verification.model.Tan;
import app.coronawarn.verification.model.TestResult;
import app.coronawarn.verification.service.FakeDelayService;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import javax.validation.Valid;
import lombok.NonNull;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.context.request.async.DeferredResult;


/**
 * This method generates a transaction number by a Registration Token, if the state of the COVID-19 lab-test is.
 */
@RestController
@RequestMapping("/version/v1 ")
public class ExternalFakeRequestController {

  @NonNull
  private final FakeDelayService fakeDelayService;

  private final ScheduledExecutorService scheduledExecutor = Executors.newScheduledThreadPool(4);

  public static final String TAN_ROUTE = "/tan";
  public static final String REGISTRATION_TOKEN_ROUTE = "/registrationToken";
  public static final String TESTRESULT_ROUTE = "/testresult";

  public ExternalFakeRequestController(@NonNull FakeDelayService fakeDelayService) {
    this.fakeDelayService = fakeDelayService;
  }


  /**
   * This method generates a transaction number by a Registration Token, if the state of the COVID-19 lab-test is
   * positive.
   *
   * @param registrationToken generated by a hashed guid or a teleTAN. {@link RegistrationToken}
   * @return A generated transaction number {@link Tan}.
   */
  @PostMapping(value = TAN_ROUTE,
    consumes = MediaType.APPLICATION_JSON_VALUE,
    produces = MediaType.APPLICATION_JSON_VALUE,
    headers = {"cwa-fake!=0"}
  )
  public DeferredResult<ResponseEntity<Tan>> generateTan(@Valid @RequestBody RegistrationToken registrationToken) {
    long delay =  fakeDelayService.getJitteredFakeTanDelay();
    DeferredResult<ResponseEntity<Tan>> deferredResult = new DeferredResult<>();
    scheduledExecutor.schedule(() -> deferredResult.setResult(ResponseEntity.ok().build()), delay, MILLISECONDS);
    return deferredResult;
  }


  /**
   * This method generates a registrationToken by a hashed guid or a teleTAN.
   *
   * @param request {@link RegistrationTokenRequest}
   * @return RegistrationToken - the created registration token {@link RegistrationToken}
   */
  @PostMapping(value = REGISTRATION_TOKEN_ROUTE,
    consumes = MediaType.APPLICATION_JSON_VALUE,
    produces = MediaType.APPLICATION_JSON_VALUE,
    headers = {"cwa-fake!=0"}
  )
  public DeferredResult<ResponseEntity<RegistrationToken>> generateRegistrationToken(
    @RequestBody @Valid RegistrationTokenRequest request) {
    long delay =  fakeDelayService.getJitteredFakeTanDelay();
    DeferredResult<ResponseEntity<RegistrationToken>> deferredResult = new DeferredResult<>();
    scheduledExecutor.schedule(() -> deferredResult.setResult(ResponseEntity.ok(new RegistrationToken())),
      delay, MILLISECONDS);
    return deferredResult;
  }


  /**
   * Returns the test status of the COVID-19 test.
   *
   * @param registrationToken generated by a hashed guid {@link RegistrationToken}
   * @return the test result / status of the COVID-19 test, which can be POSITIVE, NEGATIVE, INVALID, PENDING or FAILED
   *     and will always be POSITIVE for a TeleTan
   */
  @PostMapping(value = TESTRESULT_ROUTE,
    consumes = MediaType.APPLICATION_JSON_VALUE,
    produces = MediaType.APPLICATION_JSON_VALUE,
    headers = {"cwa-fake!=0"}
  )
  public DeferredResult<ResponseEntity<TestResult>> getTestState(
    @Valid @RequestBody RegistrationToken registrationToken) {
    long delay =  fakeDelayService.getJitteredFakeTanDelay();
    DeferredResult<ResponseEntity<TestResult>> deferredResult = new DeferredResult<>();
    scheduledExecutor.schedule(() -> deferredResult.setResult(ResponseEntity
      .ok(new TestResult(LabTestResult.POSITIVE.getTestResult()))), delay, MILLISECONDS);
    return deferredResult;

  }

}
